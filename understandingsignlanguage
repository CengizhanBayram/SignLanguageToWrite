import cv2
import numpy as np
import tensorflow as tf

# TensorFlow loglarını kapat
tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)

# Modeli yükle
def load_model(model_path, labels_path):
    with tf.io.gfile.GFile(model_path, 'rb') as f:
        graph_def = tf.compat.v1.GraphDef()
        graph_def.ParseFromString(f.read())
        tf.import_graph_def(graph_def, name='')

    with open(labels_path, 'r') as f:
        labels = [line.rstrip() for line in f.readlines()]

    return labels

# Görüntüyü işle ve tahmin yap
def predict(image_data):
    predictions = sess.run(softmax_tensor, {'DecodeJpeg/contents:0': image_data})
    top_k = predictions[0].argsort()[-len(predictions[0]):][::-1]
    return labels[top_k[0]], predictions[0][top_k[0]]

# Kamera aç ve işaret dilini tanı
def recognize_sign_language():
    cap = cv2.VideoCapture(0)

    sequence = ''
    consecutive = 0

    while True:
        ret, img = cap.read()
        img = cv2.flip(img, 1)

        if ret:
            x1, y1, x2, y2 = 100, 100, 300, 300
            img_cropped = img[y1:y2, x1:x2]
            image_data = cv2.imencode('.jpg', img_cropped)[1].tostring()

            res, score = predict(image_data)

            if res != 'nothing':
                if res == 'space':
                    sequence += ' '
                elif res == 'del':
                    sequence = sequence[:-1]
                else:
                    sequence += res

            cv2.putText(img, res.upper(), (100, 400), cv2.FONT_HERSHEY_SIMPLEX, 4, (255, 255, 255), 4)
            cv2.putText(img, '(score = %.5f)' % score, (100, 450), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255))
            cv2.rectangle(img, (x1, y1), (x2, y2), (255, 0, 0), 2)
            cv2.imshow("img", img)

            img_sequence = np.zeros((200, 1200, 3), np.uint8)
            cv2.putText(img_sequence, sequence.upper(), (30, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            cv2.imshow('sequence', img_sequence)

            if cv2.waitKey(1) == 27:
                break

    cap.release()
    cv2.destroyAllWindows()

# Ana işlem
if __name__ == "__main__":
    model_path = "logs/output_graph.pb"
    labels_path = "logs/output_labels.txt"
    labels = load_model(model_path, labels_path)

    with tf.compat.v1.Session() as sess:
        softmax_tensor = sess.graph.get_tensor_by_name('final_result:0')
        recognize_sign_language()
